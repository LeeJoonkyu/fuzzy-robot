#개발자로 살아남기 

클라이언트와 서버의 관계
웹(브라우저)/앱iOS,And/데스크톱(다운로드 받은)
서버는 컴퓨터. 클라우드 컴퓨팅의 경우 내가 좋은 컴퓨터를 쓰고 싶다.
버지니아에 있는 계산능력을 땡겨 쓰는것.
API, 복잡한 계산은 전부 서버 컴퓨터.

클라이언트는 계산을 담당하지 않아. 하기도 하는데 가급적 계산보다는 interaction과 browsing.

클라이언트 개발자는 
CS수업이 그렇게 많이 필요하지 않은데,
백엔드 서버 개발자는 좀 많이 필요하다. 로직을 짜는 영역이기 때문에.

#학습의 단계
 입문        초급        초중급             중급
예제코드   예제응용     비즈니스로직구현    어떤것이 유지보수하기 좋은 코드인가. 어떤 디자인패턴을 쓰면 좋은가. 에 대한 고민 어떤 알고리즘이 더좋은가.

#AWS란 서버 인프라 개발자 아마존이 주는 자격증. 서버의 로우레벨을 배운다.
어떻게 서버비 줄일까, 이런 걸 하는 DEV OS 개발자들이 몸값이 높다.
그런데 요새는 디자인적인 측면이 강조되면서 client 개발자의 대우도 좋아지고 잇다.

#html과 css
마크업랭귀지. 이 마크업을 가지고 웹브라우저를 만듬.
URL을 치면, 서버로 리퀘스트를 보낸다. https를 제외한 주소를 도메인. DNS주소라고 하는 건데, 이게 어떤 아이피랑 연결이 되어있따. 그 아이피 주소는 컴퓨터다. 
naver.com을.
리스폰스가 html로 오는데 이걸 브라우저가 풀어주는 것.
##IP주소는 서버의 특정 컴퓨터가 가지고 있는 주소를 말하는 것

요청과 반응의 통신이 웹이라는 이해를 명확히 해야한다.
HTTP Response. html로 이루어진 문자열을 만드는 일을한다. html덩어리를 만드는 일을 한다. 장고에서. 서버에서

###장고에서 내가 하는일을 html덩어리를 만들어서 리스폰스를 주는 것이 장고가 하는 일이다. 라는 걸 명심할 것.
클라이언트 - 서버 - DB 
이렇게 위계가 있다면 100만줄을 하드코딩하면 너무 힘들지
근데 데이터는 DB에 두고 끌어다 쓰기만하자.
이게 DB의 개념. 이걸 어떻게 쓰냐?

####서버가 DB에 쿼리를 쏘면 DB가 result를 준다. 
DB는 장고 모델과 연관이 있고, 모델은 장고와 디비가 잘 통신할 수 있게 도와주는 것.
HTTP Response를 하는 건 Django Template, DTL Language : HTML을 쉽게 만들 수 있게 도와주는 것
